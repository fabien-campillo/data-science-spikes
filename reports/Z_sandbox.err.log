Traceback (most recent call last):
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import requests
import pyabf

doi = "10.5061/dryad.xxxxx"  # replace with dataset DOI
r = requests.get(f"https://datadryad.org/api/v2/datasets/{doi}")
files = r.json()["included"]
for f in files:
    if f["attributes"]["filename"].endswith(".abf"):
        url = f["attributes"]["downloadUrl"]
        abf_data = requests.get(url)
        with open(f["attributes"]["filename"], "wb") as fh:
            fh.write(abf_data.content)
        abf = pyabf.ABF(f["attributes"]["filename"])

------------------


[31m---------------------------------------------------------------------------[39m
[31mJSONDecodeError[39m                           Traceback (most recent call last)
[36mFile [39m[32m/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/requests/models.py:976[39m, in [36mResponse.json[39m[34m(self, **kwargs)[39m
[32m    975[39m [38;5;28;01mtry[39;00m:
[32m--> [39m[32m976[39m     [38;5;28;01mreturn[39;00m [43mcomplexjson[49m[43m.[49m[43mloads[49m[43m([49m[38;5;28;43mself[39;49m[43m.[49m[43mtext[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mkwargs[49m[43m)[49m
[32m    977[39m [38;5;28;01mexcept[39;00m JSONDecodeError [38;5;28;01mas[39;00m e:
[32m    978[39m     [38;5;66;03m# Catch JSON-related errors and raise as requests.JSONDecodeError[39;00m
[32m    979[39m     [38;5;66;03m# This aliases json.JSONDecodeError and simplejson.JSONDecodeError[39;00m

[36mFile [39m[32m/opt/anaconda3/envs/jupyter-env/lib/python3.11/json/__init__.py:346[39m, in [36mloads[39m[34m(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)[39m
[32m    343[39m [38;5;28;01mif[39;00m ([38;5;28mcls[39m [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m object_hook [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m
[32m    344[39m         parse_int [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m parse_float [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m
[32m    345[39m         parse_constant [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m object_pairs_hook [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m kw):
[32m--> [39m[32m346[39m     [38;5;28;01mreturn[39;00m [43m_default_decoder[49m[43m.[49m[43mdecode[49m[43m([49m[43ms[49m[43m)[49m
[32m    347[39m [38;5;28;01mif[39;00m [38;5;28mcls[39m [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

[36mFile [39m[32m/opt/anaconda3/envs/jupyter-env/lib/python3.11/json/decoder.py:337[39m, in [36mJSONDecoder.decode[39m[34m(self, s, _w)[39m
[32m    333[39m [38;5;250m[39m[33;03m"""Return the Python representation of ``s`` (a ``str`` instance[39;00m
[32m    334[39m [33;03mcontaining a JSON document).[39;00m
[32m    335[39m 
[32m    336[39m [33;03m"""[39;00m
[32m--> [39m[32m337[39m obj, end = [38;5;28;43mself[39;49m[43m.[49m[43mraw_decode[49m[43m([49m[43ms[49m[43m,[49m[43m [49m[43midx[49m[43m=[49m[43m_w[49m[43m([49m[43ms[49m[43m,[49m[43m [49m[32;43m0[39;49m[43m)[49m[43m.[49m[43mend[49m[43m([49m[43m)[49m[43m)[49m
[32m    338[39m end = _w(s, end).end()

[36mFile [39m[32m/opt/anaconda3/envs/jupyter-env/lib/python3.11/json/decoder.py:355[39m, in [36mJSONDecoder.raw_decode[39m[34m(self, s, idx)[39m
[32m    354[39m [38;5;28;01mexcept[39;00m [38;5;167;01mStopIteration[39;00m [38;5;28;01mas[39;00m err:
[32m--> [39m[32m355[39m     [38;5;28;01mraise[39;00m JSONDecodeError([33m"[39m[33mExpecting value[39m[33m"[39m, s, err.value) [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;28;01mNone[39;00m
[32m    356[39m [38;5;28;01mreturn[39;00m obj, end

[31mJSONDecodeError[39m: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

[31mJSONDecodeError[39m                           Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 6[39m
[32m      4[39m doi = [33m"[39m[33m10.5061/dryad.xxxxx[39m[33m"[39m  [38;5;66;03m# replace with dataset DOI[39;00m
[32m      5[39m r = requests.get([33mf[39m[33m"[39m[33mhttps://datadryad.org/api/v2/datasets/[39m[38;5;132;01m{[39;00mdoi[38;5;132;01m}[39;00m[33m"[39m)
[32m----> [39m[32m6[39m files = [43mr[49m[43m.[49m[43mjson[49m[43m([49m[43m)[49m[[33m"[39m[33mincluded[39m[33m"[39m]
[32m      7[39m [38;5;28;01mfor[39;00m f [38;5;129;01min[39;00m files:
[32m      8[39m     [38;5;28;01mif[39;00m f[[33m"[39m[33mattributes[39m[33m"[39m][[33m"[39m[33mfilename[39m[33m"[39m].endswith([33m"[39m[33m.abf[39m[33m"[39m):

[36mFile [39m[32m/opt/anaconda3/envs/jupyter-env/lib/python3.11/site-packages/requests/models.py:980[39m, in [36mResponse.json[39m[34m(self, **kwargs)[39m
[32m    976[39m     [38;5;28;01mreturn[39;00m complexjson.loads([38;5;28mself[39m.text, **kwargs)
[32m    977[39m [38;5;28;01mexcept[39;00m JSONDecodeError [38;5;28;01mas[39;00m e:
[32m    978[39m     [38;5;66;03m# Catch JSON-related errors and raise as requests.JSONDecodeError[39;00m
[32m    979[39m     [38;5;66;03m# This aliases json.JSONDecodeError and simplejson.JSONDecodeError[39;00m
[32m--> [39m[32m980[39m     [38;5;28;01mraise[39;00m RequestsJSONDecodeError(e.msg, e.doc, e.pos)

[31mJSONDecodeError[39m: Expecting value: line 1 column 1 (char 0)

